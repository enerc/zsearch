#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define zsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer zsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define zsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer zsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define zsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer zsql__scan_buffer
#endif

#ifdef yy_scan_string
#define zsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string zsql__scan_string
#endif

#ifdef yy_scan_bytes
#define zsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes zsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define zsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer zsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define zsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer zsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define zsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state zsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define zsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer zsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define zsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state zsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define zsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state zsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define zsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack zsql_ensure_buffer_stack
#endif

#ifdef yylex
#define zsql_lex_ALREADY_DEFINED
#else
#define yylex zsql_lex
#endif

#ifdef yyrestart
#define zsql_restart_ALREADY_DEFINED
#else
#define yyrestart zsql_restart
#endif

#ifdef yylex_init
#define zsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init zsql_lex_init
#endif

#ifdef yylex_init_extra
#define zsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra zsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define zsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy zsql_lex_destroy
#endif

#ifdef yyget_debug
#define zsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug zsql_get_debug
#endif

#ifdef yyset_debug
#define zsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug zsql_set_debug
#endif

#ifdef yyget_extra
#define zsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra zsql_get_extra
#endif

#ifdef yyset_extra
#define zsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra zsql_set_extra
#endif

#ifdef yyget_in
#define zsql_get_in_ALREADY_DEFINED
#else
#define yyget_in zsql_get_in
#endif

#ifdef yyset_in
#define zsql_set_in_ALREADY_DEFINED
#else
#define yyset_in zsql_set_in
#endif

#ifdef yyget_out
#define zsql_get_out_ALREADY_DEFINED
#else
#define yyget_out zsql_get_out
#endif

#ifdef yyset_out
#define zsql_set_out_ALREADY_DEFINED
#else
#define yyset_out zsql_set_out
#endif

#ifdef yyget_leng
#define zsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng zsql_get_leng
#endif

#ifdef yyget_text
#define zsql_get_text_ALREADY_DEFINED
#else
#define yyget_text zsql_get_text
#endif

#ifdef yyget_lineno
#define zsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno zsql_get_lineno
#endif

#ifdef yyset_lineno
#define zsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno zsql_set_lineno
#endif

#ifdef yyget_column
#define zsql_get_column_ALREADY_DEFINED
#else
#define yyget_column zsql_get_column
#endif

#ifdef yyset_column
#define zsql_set_column_ALREADY_DEFINED
#else
#define yyset_column zsql_set_column
#endif

#ifdef yywrap
#define zsql_wrap_ALREADY_DEFINED
#else
#define yywrap zsql_wrap
#endif

#ifdef yyget_lval
#define zsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval zsql_get_lval
#endif

#ifdef yyset_lval
#define zsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval zsql_set_lval
#endif

#ifdef yyget_lloc
#define zsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc zsql_get_lloc
#endif

#ifdef yyset_lloc
#define zsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc zsql_set_lloc
#endif

#ifdef yyalloc
#define zsql_alloc_ALREADY_DEFINED
#else
#define yyalloc zsql_alloc
#endif

#ifdef yyrealloc
#define zsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc zsql_realloc
#endif

#ifdef yyfree
#define zsql_free_ALREADY_DEFINED
#else
#define yyfree zsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define zsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1156] =
    {   0,
        0,    0,  164,  164,    2,    2,  168,  166,    4,    4,
      166,  166,  156,  162,  156,  156,  159,  156,  156,  156,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  156,  164,  165,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  151,    0,
        1,  158,  157,  159,  153,  152,  150,  154,  161,  161,

      161,  161,  161,  161,  120,  161,  161,  121,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  122,  161,  161,  123,  124,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      125,  126,  127,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  129,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  155,  164,  163,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  160,  157,  108,  161,  109,  161,
      161,  110,  161,  111,  148,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  133,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  112,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  113,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  114,  161,  161,  115,  161,  161,  161,
      161,  161,  161,  147,  161,  146,  161,  161,  116,  161,
      161,  117,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  118,  161,  161,  161,
      161,  149,  161,  161,  161,  161,  161,  119,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      128,  161,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      161,  161,  161,  161,  161,  161,  161,   78,  161,   79,
       41,   80,  161,  161,  161,   81,  161,  161,  161,   82,
      161,  161,  161,  161,   84,  161,  161,  161,   85,   86,
      161,  161,  161,  161,  161,  161,  161,   87,  161,  161,
       88,   89,  161,  161,   90,  161,   91,  132,  161,  161,
      161,  161,  161,  161,   92,  161,   93,   94,   95,  161,
       97,  161,   98,  161,  161,  161,  161,   99,  161,  161,
      161,  161,  161,  100,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  101,  161,  161,  161,  161,  161,
      161,  102,  103,  104,  161,  136,  161,  161,  161,  161,
      161,  161,  161,  161,  105,  161,  106,  161,  107,  135,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       58,   59,  161,   60,  161,  139,  161,  161,  161,  161,
      161,  145,  161,   61,  161,  161,  161,  161,   62,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  137,
       63,  161,  161,   64,  161,   96,  161,   65,   66,  161,
      161,  161,  161,   67,   68,   69,   70,  161,  134,  161,
      161,  161,   71,   72,  161,  142,  161,  161,  161,  161,

       73,  161,  161,  161,  161,  161,  161,  161,  161,   74,
      161,  161,  161,  161,   75,  161,  161,  161,   76,  161,
      161,  161,   77,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  161,   31,  161,  161,
       32,  141,  161,   33,  161,  161,  161,   34,  161,   35,
      161,   36,   37,   38,  161,   39,  161,  161,   42,   43,
       44,   45,   46,  161,  161,   47,  131,  161,  161,   48,
      161,  161,  161,   49,  161,  161,   50,  130,   51,   52,
      161,  161,  161,   53,  161,  161,  161,  161,   54,   55,
       56,   57,  161,  161,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   15,   16,   17,   18,   19,  161,  161,   20,
      161,  161,   21,   22,   40,   23,  161,   24,  161,  161,
       25,   26,  161,  161,   27,   28,  161,  143,  161,  161,
      161,  161,   29,   30,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   83,  161,   10,   11,
      161,   12,  161,   13,  140,  161,  161,  161,  161,   14,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  161,    7,  161,  161,    8,    9,
      161,    2,    2,    2,    2,    2,    2,    2,    5,    6,
      161,  161,    2,    2,    2,    2,  161,  138,    2,    2,
      161,    2,  161,    2,  161,    2,  161,    2,  161,    2,
      161,    2,  144,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1163] =
    {   0,
        0,    0,  378,  375,   67,    0,  379, 4580,  133,  135,
      365,    0, 4580, 4580,  367,  364,  130,  129,  361,  360,
      126,  126,  134,  132,  142,  193,  168,  181,  185,  121,
      138,  180,  235,  227,  233,  244,    0,  228,  287,  335,
      268,  191,  244,  131,  198,  295,    0,  332,    0,  268,
      304,  324,  321,    0,    0,  296,  291,  300,  299,  286,
      269,  393,  460,  514,  566,  614,  666,  300,  389,  714,
      295,  296,  391,  461,  766,  814,  866,  299,  452,  916,
      968,  502,  473,  528,  458,  351,  211,  326, 4580,  228,
     4580,  218,  213,  345, 4580, 4580, 4580, 4580,    0,  230,

      226,  326,  409,  288,  365,  367,  545,    0,  390,  407,
      556,  464,  503,  581,  400,  423,  449,  449,  468,  472,
      627,  469,  499,  502,  502,  515,  519,  520,  546,  564,
      560,  555,    0,  576,  573,  603,  601,  612,  599,  619,
      618,  676,  611,  619,  627,  631,  641,  649,  661,  675,
      674,    0,  678,  663,  667,  685,  680,  716,  710,  688,
      703,  715,  729,  715,  713,  733,  179,  722,  734,  756,
      732,  725,  727,  774,  765,  741,  764,  766,  781,  774,
      762,  765,  784, 4580,    0, 4580,    0,  365,    0,  209,
        0,  190,  187,  361,    0,    0,    0,    0,  792,  825,

      811,  840,  881,  816,  870,  910,  920,  844,  966,  956,
     1016,  878,  918, 1068, 1006,  974, 1002, 1014, 1011, 1067,
     1118, 1066, 1070, 1110, 1085, 1121, 1119, 1124, 1142, 1150,
     1154, 1056,  950, 1155, 1172, 1221, 1176, 1180, 1081, 1204,
     1234, 1274, 1198, 1226, 1229, 1255, 1278, 1280, 1289, 1288,
     1259, 1292, 1304, 1313, 1329, 1318, 1343, 1344, 1352, 1357,
     1378, 1380, 1394, 1396, 1395, 1417, 1426, 1430, 1432, 1447,
     1326, 1460, 1434, 1488, 1471, 1463, 1492, 1509, 1486, 1497,
     1525, 1501, 1534,    0, 4580,  158,    0,  822,    0,  832,
      841,    0,  869,    0,    0,  859,  880,  884,  917, 1553,

      921,  926,  947, 1003, 1010, 1026, 1048, 1065, 1080,    0,
     1077, 1191, 1532, 1190, 1195, 1191, 1219, 1239, 1258,    0,
     1294, 1354, 1364, 1383, 1424, 1436, 1486, 1537, 1542, 1534,
     1538, 1543, 1558, 1542, 1557, 1558, 1548, 1553, 1564, 1561,
     1575, 1576, 1579, 1584, 1567, 1577,    0, 1573, 1591, 1588,
     1597, 1603, 1598,    0, 1599, 1588, 1590, 1591,    0, 1601,
     1596, 1598, 1614, 1616, 1621, 1611, 1613, 1613, 1617, 1633,
     1615, 1630, 1630, 1638, 1630, 1642,    0, 1627, 1631, 1633,
     1654,    0, 1643, 1643, 1640, 1649, 1659,    0, 1652, 1662,
     1664, 1653, 1670, 1661, 1662, 1681, 1665, 1669, 1678, 1689,

        0, 1681,    0,  156, 1696, 1700, 1702, 1704, 1708, 1712,
     1713, 1717, 1725, 1738, 1726, 1750, 1754, 1769, 1763, 1766,
     1771, 1787, 1792, 1808, 1804, 1822, 1805, 1820, 1823, 1841,
     1833, 1856, 1838, 1859, 1887, 1862, 1871, 1872, 1897, 1895,
     1896, 1912, 1928, 1925, 1913, 1910, 1950, 1941, 1958, 1964,
     1982, 1947, 1980, 1992, 2001, 1995, 2014, 2026, 2004, 2013,
     2017, 2045, 2050, 2049, 2032, 2068, 2054, 2067, 2091, 2103,
     2100, 2086, 2105, 2108, 2089, 2121, 2119, 2142, 2140, 2143,
     2145, 2154, 2175, 2173, 2177, 2183, 2188, 2211, 2199, 2225,
     2229, 2158, 2217, 2212, 2233, 2247, 2242, 2251, 2282, 2248,

     2270, 2299, 2285, 2311, 2286, 2287, 2315, 2316, 2344, 2330,
     2345, 2339, 2353, 2378, 2370, 2374, 2393, 2384, 2399, 2410,
     1694, 1786, 1857, 1858, 1889, 1994, 2057,    0, 2183,    0,
        0,    0, 2183, 2212, 2248,    0, 2276, 2286, 2308, 2340,
     2378, 2379, 2392, 2412, 2396, 2420, 2420, 2420,    0,    0,
     2417, 2421, 2422, 2424, 2445, 2446, 2443,    0, 2429, 2451,
        0,    0, 2452, 2438,    0, 2443,    0,    0, 2453, 2443,
     2439, 2447, 2448, 2460,    0, 2456,    0,    0,    0, 2449,
        0, 2460,    0, 2472, 2463, 2478, 2469,    0, 2486, 2486,
     2479, 2480, 2487,    0, 2481, 2501, 2502, 2493, 2489, 2488,

     2509, 2499, 2501, 2514,    0, 2514, 2511, 2512, 2504, 2518,
     2511,    0,    0, 2512, 2513,    0, 2533, 2523, 2519, 2540,
     2523, 2538, 2546, 2544,    0, 2533,    0, 2550,    0,    0,
     2551, 2555, 2552, 2560, 2570, 2584, 2561, 2569, 2605, 2586,
     2592, 2594, 2615, 2618, 2624, 2609, 2640, 2643, 2634, 2653,
     2659, 2672, 2669, 2678, 2694, 2704, 2708, 2703, 2713, 2718,
     2732, 2736, 2726, 2757, 2748, 2758, 2762, 2766, 2776, 2792,
     2767, 2780, 2801, 2806, 2802, 2811, 2810, 2816, 2825, 2841,
     2840, 2842, 2851, 2877, 2846, 2876, 2865, 2874, 2875, 2899,
     2880, 2908, 2905, 2909, 2930, 2913, 2934, 2911, 2939, 2948,

     2949, 2965, 2979, 2953, 2982, 2988, 2998, 2993, 2990, 3007,
     3019, 3033, 3038, 3044, 3032, 3036, 3057, 3072, 3062, 3067,
     3086, 3070, 3073, 3081, 3098, 3107, 3126, 3121, 3115, 3136,
     3140, 3150, 3144, 3166, 3161, 3174, 3165, 3175, 3178, 3180,
        0,    0, 2579,    0, 2603,    0, 2722, 2809, 2995, 3008,
     3041,    0, 3110,    0, 3107, 3106, 3142, 3172,    0, 3180,
     3174, 3194, 3204, 3206, 3194, 3195, 3200, 3211, 3220,    0,
        0, 3204, 3213,    0, 3221,    0, 3209,    0,    0, 3211,
     3228, 3215, 3225,    0,    0,    0,    0, 3234,    0, 3239,
     3235, 3224,    0,    0, 3240,    0, 3230, 3231, 3248, 3245,

        0, 3256, 3258, 3258, 3243, 3261, 3267, 3250, 3264, 3255,
     3259, 3258, 3278, 3281,    0, 3278, 3281, 3282,    0, 3269,
     3290, 3292,    0, 3292, 3294, 3297, 3302, 3303, 3306, 3308,
     3332, 3327, 3342, 3346, 3340, 3348, 3351, 3361, 3370, 3394,
     3376, 3382, 3400, 3391, 3410, 3385, 3415, 3424, 3425, 3434,
     3449, 3458, 3416, 3450, 3459, 3482, 3464, 3488, 3473, 3492,
     3494, 3498, 3513, 3503, 3522, 3524, 3526, 3527, 3532, 3537,
     3548, 3556, 3565, 3567, 3562, 3566, 3578, 3580, 3581, 3602,
     3606, 3590, 3616, 3591, 3634, 3635, 3624, 3645, 3668, 3656,
     3664, 3666, 3690, 3689, 3699, 3700, 3712, 3698, 3701, 3734,

     3722, 3724, 3738, 3757, 3766, 3743, 3289,    0, 3284, 3298,
     3297,    0, 3330,    0, 3364, 3388, 3445,    0, 3471,    0,
     3574,    0,    0,    0, 3621,    0, 3623, 3665,    0,    0,
        0,    0,    0, 3727, 3755,    0,    0, 3749, 3768,    0,
     3753, 3772, 3753,    0, 3776, 3777, 3762,    0,    0,    0,
     3771, 3772, 3789,    0, 3796, 3798, 3798, 3782,    0,    0,
        0,    0, 3785, 3799, 3807, 3808, 3809, 3810, 3812, 3811,
     3840, 3822, 3843, 3846, 3861, 3848, 3865, 3852, 3882, 3864,
     3877, 3886, 3894, 3896, 3910, 3900, 3898, 3928, 3931, 3932,
     3934, 3936, 3940, 3944, 3950, 3962, 3972, 3953, 3986, 3984,

     3985, 3988, 4016, 4020, 4003, 4002, 4007, 4026, 4048, 4037,
     4039, 4042, 4060, 4074, 4078, 4091, 4061, 4072, 4090, 4093,
     4096, 4115,    0,    0,    0,    0,    0, 3938, 3943,    0,
     3994, 3983,    0,    0,    0,    0, 4026,    0, 4045, 4077,
        0,    0, 4085, 4096,    0,    0, 4116,    0, 4101, 4116,
     4111, 4128,    0,    0, 4130, 4132, 4134, 4144, 4145, 4146,
     4160, 4147, 4148, 4169, 4158, 4170, 4182, 4186, 4200, 4188,
     4199, 4201, 4203, 4204, 4222, 4232, 4214, 4236, 4257, 4240,
     4255, 4254, 4258, 4266, 4270, 4271,    0, 4203,    0,    0,
     4257,    0, 4263,    0,    0, 4279, 4272, 4283, 4292,    0,

     4306, 4307, 4308, 4309, 4310, 4311, 4346, 4320, 4324, 4341,
     4342, 4363, 4360, 4345, 4312,    0, 4302, 4350,    0,    0,
     4360, 4376, 4378, 4394, 4384, 4379, 4395, 4417,    0,    0,
     4385, 4393, 4413, 4416, 4418, 4419,  112,    0, 4430, 4447,
     4410, 4448, 4421, 4458, 4431, 4453, 4449, 4470, 4458, 4479,
     4481, 4482,    0, 4484, 4580, 4549, 4554,  142, 4559, 4564,
     4569, 4574
    } ;

static const flex_int16_t yy_def[1163] =
    {   0,
     1155,    1, 1156, 1156, 1155,    5, 1155, 1155, 1155, 1155,
     1155, 1157, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1155, 1159, 1155, 1160, 1160,
     1155, 1160, 1161, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1162, 1162,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63, 1160, 1155, 1155, 1157,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1155, 1159, 1155, 1160, 1160, 1160, 1161,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63, 1160, 1155, 1155, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1160, 1160,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1158, 1158, 1158, 1158, 1158, 1158,
     1158,   63,   63,   63,   63,   63,   63,   63, 1158, 1158,
     1158, 1158,   63,   63,   63,   63, 1158, 1158,   63,   63,
     1158,   63, 1158,   63, 1158,   63, 1158,   63, 1158,   63,
     1158,   63, 1158,   63,    0, 1155, 1155, 1155, 1155, 1155,
     1155, 1155
    } ;

static const flex_int16_t yy_nxt[4648] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   37,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,

       82,   83,   84,   85,   86,   78,   49,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   78,   87,   88,   88,   88,   88,   93,   94,
       95,   96,  100,  107,  101,  113,   99,  109,  138,  114,
      102, 1141,  103,  115,  110,  139,  104,  105,  182,  116,
      106,  111,  117,  108,  112,  404,  118,  286,  119,  100,
      107,  101,  113,  120,  109,  138,  114,  102,  121,  103,
      115,  110,  139,  104,  105,  182,  116,  106,  111,  117,
      108,  112,  128,  118,  130,  119,  404,  140,  129,  192,

      120,  141,  131,  133,  178,  121,  122,  142,  132,  134,
      135,  136,  179,  403,  123,  183,  137,  124,  381,  128,
      125,  130,  286,  126,  140,  129,  127,   92,  141,  131,
      133,  178,  285,  122,  142,  132,  134,  135,  136,  179,
      147,  123,  183,  137,  124,  159,  287,  125,  143,  160,
      126,  151,  144,  127,  148,  161,  145,  155,  288,  152,
      149,  150,  146,  153,  180,  181,  154,  147,  156,  188,
       88,  157,  159,  287,  158,  143,  160,  284,  151,  144,
      198,  148,  161,  145,  155,  288,  152,  149,  150,  146,
      153,  180,  181,  154,  175,  156,  176,  197,  157,  177,

      192,  158,  162,  191,  163,   88,   88,  164,  193,  194,
      195,  196,  199,  239,  165,  166,  199,  199,  293,  167,
      168,  175,  238,  176,  228,  187,  177,   88,   88,  162,
      229,  163,  199,  199,  164,  189,  199,  199,  186,  199,
      239,  165,  166,  199,  199,  293,  167,  168,  169,  238,
      289,  228,  170,   93,   94,  171,  172,  229,  290,  199,
      199,  184,  173,  199,  199,  174,  188,   88,  283,  193,
      194,   98,   97,   92,   91,  169,   89,  289, 1155,  170,
      294,   48,  171,  172,   48,  290,  295, 1155,  199,  173,
     1155, 1155,  174,  187,  187,  283,  187,  187,  187,  187,

      187,  187,  230,  187,  187,  187,  199,  294,  240,  200,
      231,  201,  241,  295,  299,  199,  232,  202,  242,  203,
      301,  300,  291,  204,  205,  292,  199,  206,  199,  230,
      315,  316, 1155,  199, 1155,  240,  200,  231,  201,  241,
     1155,  299, 1155,  232,  202,  242,  203,  301,  300,  291,
      204,  205,  292,  199,  206,  199,  317,  315,  316,  187,
      187,  187, 1155,  187,  187,  187,  187,  187,  187,  259,
      187,  187,  187,  260,  243,  199,  318,  207,  244,  261,
      319,  307,  245,  317,  320,  282,  278,  321,  246,  199,
      199,  308, 1155,  327,  279,  199,  259,  208,  199, 1155,

      260,  243,  199,  318,  207,  244,  261,  319,  307,  245,
      199,  320,  282,  278,  321,  246,  199,  199,  308,  199,
      327,  279,  199,  328,  208,  199,  187,  209,  275,  329,
      276,  199,  330,  277,  210,  309, 1155,  199, 1155,  199,
      310,  211,  331,  332,  212,  199,  199,  333,  280,  281,
      328,  199, 1155, 1155,  209,  275,  329,  276,  199,  330,
      277,  210,  309,  296,  297,  199,  199,  310,  211,  331,
      332,  212,  199,  334,  333,  280,  281,  298,  199,  213,
      302,  303,  304,  214,  305, 1155,  337,  215,  338,  306,
      296,  297,  199,  216,  311,  335,  217,  339,  336,  312,

      334,  340, 1155,  199,  298,  313,  213,  302,  303,  304,
      214,  305,  314,  337,  215,  338,  306, 1155, 1155,  341,
      216,  311,  335,  217,  339,  336,  312,  345,  340,  342,
      199,  199,  313,  346,  343,  344,  347,  348,  218,  314,
      219,  349,  322,  350,  323,  220,  341,  354,  324,  355,
      221,  199, 1155,  356,  345,  325,  342,  357,  199,  326,
      346,  343,  344,  347,  348,  218, 1155,  219,  349,  322,
      350,  323,  220,  358,  354,  324,  355,  221,  199,  222,
      356,  359,  325,  199,  357,  360,  326,  223,  361,  351,
      224,  352,  362,  225,  363,  364,  226,  365,  366,  227,

      358,  367,  353,  199, 1155, 1155,  222,  372,  359, 1155,
      199, 1155,  360, 1155,  223,  361,  351,  224,  352,  362,
      225,  363,  364,  226,  365,  366,  227,  373,  367,  353,
      199,  199,  233,  368,  372,  374,  370,  369,  234,  235,
      236,  371,  378,  379,  375,  237,  380,  382,  383,  386,
      387,  199, 1155,  376,  373,  388, 1155,  393,  199,  233,
      368,  377,  374,  370,  369,  234,  235,  236,  371,  378,
      379,  375,  237,  380,  382,  383,  386,  387,  199,  247,
      376,  384,  388,  199,  393,  394,  391,  389,  377,  392,
      395,  399,  385,  248,  400,  401,  396,  402,  397,  249,

      250, 1155, 1155,  199, 1155, 1155,  247,  390,  384,  199,
      199,  398,  394,  391,  389, 1155,  392,  395,  399,  385,
      248,  400,  401,  396,  402,  397,  249,  250,  199,  199,
      199,  199,  251,  199,  390, 1155,  199, 1155,  398,  521,
      252,  405,  199,  406,  253, 1155,  411,  254,  199,  522,
     1155,  199, 1155,  199, 1155,  199,  199,  199,  199,  251,
      199,  199,  199, 1155,  407,  523,  521,  252,  405,  199,
      406,  253,  408,  411,  254,  199,  522,  199,  199,  255,
      199,  199,  524,  199,  199,  412,  525,  199,  199,  199,
      256,  407,  523,  257,  409,  425,  258,  410,  199,  408,

     1155,  526, 1155,  199,  199,  426,  255,  199,  199,  524,
      199, 1155,  412,  525,  199,  199, 1155,  256,  199,  527,
      257,  409,  425,  258,  410,  199, 1155,  199,  526,  413,
      199,  262,  426,  263,  199,  199,  264,  199,  414,  415,
     1155,  528,  199,  265,  266,  199,  527,  199,  267,  268,
      427,  532,  416,  199,  199,  428,  413,  199,  262,  533,
      263, 1155,  199,  264,  199,  414,  415,  199,  528,  419,
      265,  266,  534,  199,  199,  267,  268,  427,  532,  416,
      199,  269,  428,  199,  199,  270,  533,  199,  271,  272,
      417,  199, 1155,  199,  199,  273,  419,  418,  274,  534,

      199, 1155, 1155,  199, 1155,  199, 1155,  435,  269, 1155,
      199,  199,  270, 1155,  199,  271,  272,  417,  199,  199,
      199, 1155,  273,  199,  418,  274, 1155,  438,  199,  436,
      199,  199,  199,  199,  435,  535,  433,  434,  199,  199,
      420,  421,  422,  199,  423,  437,  199,  536,  199,  424,
      199,  199,  537,  199,  438,  199,  436, 1155,  199, 1155,
      199,  538,  535,  433,  434, 1155,  199,  420,  421,  422,
      199,  423,  437,  199,  536,  199,  424, 1155,  199,  537,
      199,  429,  439,  199,  199,  199,  430,  199,  538,  456,
      445, 1155,  431,  199,  446, 1155,  539,  540,  199,  432,

      199,  541,  199,  199,  199,  199, 1155,  199,  429,  439,
      199,  199,  199,  430,  199,  448,  456,  445,  465,  431,
      199,  446,  199,  539,  540,  199,  432,  199,  541,  199,
      199,  199,  199,  440,  199,  441,  199,  447,  199,  442,
     1155,  199,  448,  450, 1155,  465,  443,  199,  449,  199,
      444,  451, 1155, 1155,  199,  199,  199, 1155,  199,  199,
      440,  199,  441,  199,  447,  199,  442,  199,  199,  452,
      450,  199,  199,  443,  199,  449,  457,  444,  451,  199,
      455,  453,  199,  199,  454,  199,  199,  199,  199,  199,
     1155,  199,  199,  199,  199, 1155,  452,  199,  199,  199,

      458,  464,  463,  457,  542,  545,  199,  455,  453,  199,
     1155,  454,  546,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  466,  547,  199, 1155, 1155,  458,  464,  463,
     1155,  542,  545,  548,  472,  199,  199,  459,  199,  546,
      199,  199,  199,  199,  199, 1155,  199,  460,  199,  466,
      547,  199,  461,  462, 1155,  474,  473,  467,  199,  468,
      548,  472,  199,  199,  459,  199,  199,  549,  199, 1155,
      199,  199,  199,  199,  460,  550,  199,  480,  199,  461,
      462,  475,  474,  473,  467,  199,  468,  469, 1155,  470,
      199,  199,  199,  199,  549,  199,  199,  199,  199,  199,

      471,  479,  550,  199,  480,  199,  199,  551,  475,  199,
      476,  199,  477,  478,  469,  199,  470,  199,  199,  199,
      481,  199,  199,  199,  199,  199,  199,  471,  479,  199,
      199,  484,  199,  199,  551,  199,  199,  476,  199,  477,
      478,  199,  199,  504,  199,  482,  199,  481,  199, 1155,
      199, 1155,  199,  199, 1155,  199,  199,  199,  484,  483,
      199,  486,  199,  199,  485,  487,  199, 1155,  199,  199,
      504,  552,  482,  199,  199, 1155,  490,  199,  488,  553,
      199,  199,  199,  489, 1155, 1155,  483,  199,  486,  199,
      199,  485,  487,  199,  199,  199,  199,  199,  552, 1155,

      492,  199,  491,  490, 1155,  488,  553,  199,  199,  493,
      489,  199,  199,  199,  554,  199,  199,  199,  494, 1155,
     1155,  199,  199,  496,  199,  497,  495,  492, 1155,  491,
      498,  199,  199,  199,  199, 1155,  493, 1155,  199,  199,
      199,  554,  199,  199,  199,  494,  501,  199,  555,  199,
      496,  199,  497,  495,  199,  500, 1155,  498,  199,  199,
      199,  199,  506,  199,  199,  499,  556,  199, 1155,  199,
      199,  199,  502,  501,  199,  555,  199,  199,  199,  511,
      199,  199,  500,  503,  199,  505, 1155, 1155,  199,  506,
      199,  199,  509,  556,  199,  510,  199,  199,  199,  502,

      199,  507, 1155,  515,  199,  199,  511,  199,  199,  199,
      503,  199,  505,  512,  517,  199,  516,  557,  199,  509,
     1155,  508,  510,  199,  199,  199,  199,  199,  507,  199,
      515,  519,  199,  513,  199,  199,  199, 1155,  199,  514,
      512,  517,  199,  516,  557,  199,  199,  520,  508,  543,
      199,  199,  199,  199,  558,  559,  199,  518,  519,  560,
      513,  199,  199,  561,  544,  199,  514,  562,  529,  199,
      530,  199,  563,  199,  520,  564,  543,  565,  199,  566,
      567,  558,  559,  568,  518,  531,  560,  569,  570,  199,
      561,  544,  571,  572,  562,  529,  573,  530,  199,  563,

      576,  574,  564,  577,  565,  578,  566,  567,  579,  580,
      568,  575,  531,  581,  569,  570,  582,  583,  584,  571,
      572,  585,  586,  573,  587,  588,  589,  576,  574,  590,
      577,  591,  578,  592,  593,  579,  580,  594,  575,  595,
      581,  596,  597,  582,  583,  584,  598,  599,  585,  586,
      600,  587,  588,  589,  601,  602,  590,  603,  591,  604,
      592,  593,  605,  606,  594,  607,  595,  610,  596,  597,
      608,  611,  612,  598,  599,  613,  614,  600,  615,  616,
      620,  601,  602,  621,  603,  609,  604,  622,  617,  605,
      606,  618,  607,  619,  610,  623,  624,  608,  611,  612,

      625,  626,  613,  614,  627,  615,  616,  620,  628,  629,
      621,  630,  609,  199,  622,  617, 1155,  631,  618,  199,
      619,  632,  623,  624,  741,  199,  634,  625,  626,  199,
      199,  627,  633,  199,  199,  628,  629,  199,  630,  199,
      199,  199,  199,  199,  631,  199,  199,  636,  632,  199,
      199,  741,  199,  634,  199,  199,  199,  199, 1155,  633,
      199,  199,  199,  199,  199,  635,  199,  199,  199,  199,
      199,  199,  199, 1155,  636,  199,  199,  199,  638, 1155,
      199,  199,  199,  199,  639,  637,  640,  199,  199,  199,
      199,  199,  635,  642,  199, 1155,  644, 1155,  199,  643,

      199,  641,  199,  199,  199,  638,  199,  199,  199,  199,
      199,  639,  637,  640,  199,  199,  742,  648,  199,  645,
      642,  199,  650,  644,  199,  199,  643,  199,  641,  646,
      199,  199, 1155,  199,  647,  199,  199,  199, 1155,  199,
      199,  199,  199,  742,  648,  199,  645,  651,  199,  650,
      653,  199,  199,  649,  652,  656,  646,  199,  199,  199,
      199,  647, 1155, 1155,  199,  654,  199,  199,  199,  199,
      199,  655,  199,  199,  651,  199,  199,  653,  199,  199,
      649,  652,  656, 1155,  199,  199,  199,  199,  660,  199,
      659,  657,  654,  199,  743,  744,  199,  199,  655,  199,

      199,  658,  199,  199,  199,  199,  199, 1155,  199,  199,
      661,  663,  662,  199,  199,  660,  199,  659,  657,  745,
      199,  743,  744,  199,  199, 1155,  199,  668,  658,  199,
      199,  199,  199,  199,  199,  199,  199,  661,  663,  662,
      199,  199,  199,  664,  667,  199,  745,  199, 1155,  199,
      199,  199,  665, 1155,  668,  666,  199,  199,  199,  199,
      199,  199,  199,  669,  199,  199,  670,  199, 1155,  199,
      664,  667,  199, 1155,  199,  199,  199,  199,  199,  665,
      674,  199,  666,  671,  199,  199, 1155,  199,  672,  199,
      669,  199,  199,  670,  199,  199,  673,  199, 1155,  199,

      675,  199,  199, 1155, 1155,  199, 1155,  674,  199,  199,
      671,  199,  199,  676,  199,  672, 1155,  199,  199,  199,
      746,  681,  199,  673,  199,  678,  199,  675,  199,  199,
      682,  199,  199,  677,  683, 1155,  199,  679,  199,  199,
      676,  199, 1155,  199,  199,  199,  199,  746,  681,  199,
      199,  199,  678,  680,  199, 1155,  199,  682,  199,  199,
      677,  683,  684,  199,  679,  199,  199,  199,  199,  199,
      199,  689,  685, 1155,  747,  687,  199,  199,  199, 1155,
      680,  199,  199,  686,  199,  199,  199,  199,  690,  684,
      199,  199, 1155,  199,  199, 1155,  199, 1155,  689,  685,

      688,  747,  687,  199,  199,  199,  199,  691,  199,  199,
      686,  199,  199,  199,  199,  690,  692,  199,  199,  693,
      199,  696,  199,  199,  694,  199,  199,  688,  199, 1155,
      199,  199,  199,  199,  691,  199,  199,  199,  199, 1155,
      199,  695,  199,  692,  199,  199,  693,  199,  696,  199,
      199,  694,  199,  199,  697,  199,  199,  199,  199,  199,
      199, 1155,  701,  199,  199,  199,  698,  199,  695,  199,
      699,  702,  199, 1155,  700,  712, 1155,  199, 1155,  199,
      199,  697,  199,  199,  199,  199,  199,  199,  703,  701,
      199,  199,  199,  698,  199,  199,  748,  699,  702,  704,

      199,  700,  712,  705,  199,  199,  199,  199,  749,  199,
      199,  706,  199,  707,  199,  703,  199,  199,  199,  199,
      199,  199,  199,  748,  708,  199,  704,  199,  199,  714,
      705,  709,  199,  750,  199,  749,  199,  199,  706,  199,
      707,  199,  199,  199,  713,  710,  199,  199,  199,  199,
      199,  708,  199,  711,  199,  199,  714, 1155,  709,  199,
      750,  199,  199,  199,  199,  199,  199, 1155,  199,  199,
      199,  713,  710,  199,  716,  199,  199,  199,  751,  199,
      711,  199,  715,  717,  199,  199,  199,  199,  199,  199,
     1155,  199,  199,  199,  720,  199, 1155,  199,  718,  199,

     1155,  716,  199,  724,  199,  751,  199,  199,  752,  715,
      717,  199,  199,  719,  199,  199,  199,  722,  753,  199,
     1155,  720,  199,  199,  199,  718,  199,  721,  199,  199,
      724,  199,  199,  726,  199,  752,  199,  723, 1155,  754,
      719,  725,  727,  199,  722,  753,  199,  199,  199,  199,
      199,  199,  199,  199,  721,  199,  199,  730,  731,  199,
      726,  199,  199,  199,  723,  732,  754,  199,  725,  727,
      199,  728,  755,  729,  199,  199,  199, 1155, 1155,  199,
      199,  199,  199,  199,  730,  731,  733,  199,  199,  199,
      199,  199,  732,  734,  199,  199, 1155,  199,  728,  755,

      729,  199,  756,  199,  739,  735,  736,  199,  199,  199,
      199,  199,  757,  733,  199,  199,  199,  199,  199,  737,
      734,  199,  199,  738,  758,  759,  760,  199,  199,  756,
      199,  739,  735,  736,  199,  761,  199,  199,  199,  757,
      740,  762,  199,  199,  763,  764,  737,  199,  199,  765,
      738,  758,  759,  760,  199,  766,  767,  199,  768,  769,
      770,  771,  761,  199,  772,  773,  774,  740,  762,  775,
      776,  763,  764,  777,  199,  778,  765,  779,  780,  781,
      783,  784,  766,  767,  785,  768,  769,  770,  771,  786,
      782,  772,  773,  774,  787,  788,  775,  776,  789,  790,

      777,  791,  778,  792,  779,  780,  781,  783,  784,  793,
      794,  785,  795,  796,  797,  798,  786,  782,  799,  800,
      801,  787,  788,  802,  803,  789,  790,  804,  791,  805,
      792,  806,  807,  808,  809,  810,  793,  794,  811,  795,
      796,  797,  798,  812,  813,  799,  800,  801,  814,  815,
      802,  803,  816,  817,  804,  818,  805,  819,  806,  807,
      808,  809,  810,  820,  821,  811,  822,  823,  199,  199,
      812,  813,  199, 1155, 1155,  814,  815,  199,  830,  816,
      817,  824,  818, 1155,  819,  825,  199,  199,  199,  826,
      820,  821,  199,  822,  823,  199,  199,  827,  199,  199,

      828,  199, 1155,  199,  199,  830,  199,  199,  824,  199,
      829,  199,  825,  199,  199,  199,  826,  907,  831,  199,
      908,  199,  199,  199,  827,  199,  199,  828,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  829,  199,  833,
      832,  199,  199, 1155,  907,  831,  199,  908,  199,  199,
      199,  199,  199,  199,  834,  199,  199,  199,  199,  199,
      199,  199,  199, 1155, 1155,  837,  833,  832,  199,  199,
      199,  199,  835,  199, 1155,  836,  199,  199,  199,  199,
      199,  834,  199,  839,  199,  838,  199,  199,  199,  199,
      199,  842,  837, 1155, 1155,  199,  199,  199,  199,  835,

     1155,  841,  836,  199,  199,  840,  199,  199, 1155,  199,
      839,  199,  838,  199, 1155,  199,  199,  199,  842,  844,
      199,  199,  199,  199,  843,  199, 1155,  846,  841,  845,
      199,  199,  840,  199, 1155,  199,  199, 1155,  199,  909,
      199,  199,  199,  199, 1155,  199,  844,  199,  199,  199,
      199,  843,  199,  199,  846,  199,  845,  199,  199,  849,
      847,  851,  199,  199,  848,  199,  909,  199,  199,  199,
      199,  852,  199,  199,  199,  199,  199,  199, 1155,  853,
      199, 1155,  199,  199,  199,  199,  849,  847,  851,  850,
      199,  848,  199,  199,  199,  199,  199,  199,  852,  199,

      199,  199,  199,  199,  199,  855,  853, 1155,  854,  199,
      199,  199,  199,  199,  856, 1155,  850,  199,  199,  199,
      199,  199,  199,  199,  199,  910,  199,  199,  199,  199,
      199,  199,  855,  199,  857,  854,  199,  858,  199,  199,
      199,  856,  859,  199,  199,  199,  199,  199,  199, 1155,
      199, 1155,  910,  199,  199,  199,  199,  199,  199,  199,
      199,  857,  199,  199,  858,  199,  199, 1155,  199,  859,
      199,  860,  862, 1155,  199,  199,  861,  199,  199,  199,
      199,  863,  199,  199,  199,  199,  199, 1155,  199,  199,
      199,  199,  199,  199,  199,  199,  864,  199,  860,  862,

      866, 1155,  199,  861,  199,  199,  199,  865,  863,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  864,  199,  199,  869,  866,  199,  199,
      199,  867,  868,  872,  865, 1155,  199, 1155,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  869,  874,  199,  199,  199,  867,  868,
      872,  870,  871,  199,  873,  875,  199,  199, 1155,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  876,
     1155,  874,  199,  199, 1155,  199,  199, 1155,  870,  871,
      199,  873,  875,  199,  199,  877,  199,  199,  199,  199,

     1155,  880,  199,  199,  878,  199,  876,  199, 1155,  199,
      199,  881,  199,  199,  879,  199,  199,  199,  882,  199,
      883,  911,  877,  199,  199,  199,  199,  199,  880,  199,
      199,  878,  199,  885,  199,  199,  199,  199,  881,  884,
      912,  879,  199,  199,  199,  882,  199,  883,  911,  199,
      199,  199,  199,  889,  199,  199,  199,  199,  886,  888,
      885,  199,  199,  199,  887, 1155,  884,  912,  913,  199,
      199,  199, 1155,  199,  199,  199,  199,  199,  890,  199,
      889,  199,  199,  199,  893,  886,  888,  199,  199,  199,
      199,  887,  892,  891,  199,  913,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  890,  199,  199,  199,  199,
      199,  893,  895,  894,  199,  199,  199,  199,  199,  892,
      891,  199, 1155,  199,  199,  199,  199,  914,  915,  896,
      199,  199,  199,  916,  199,  199,  199,  199,  199,  895,
      894,  897,  199,  199,  199,  199, 1155,  898,  899,  900,
      199,  199,  199,  199,  914,  915,  896,  199,  199,  199,
      916,  903,  199,  199, 1155,  199,  917,  199,  897,  902,
      199,  199,  901,  199,  898,  899,  900,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  904,  199,  903,  918,
      199,  199,  906,  917,  199,  199,  902,  199,  199,  901,

      199,  919,  199,  199,  199,  199,  920,  905,  199,  199,
      199,  199,  199,  904,  199,  199,  918,  199,  199,  906,
      921,  922,  199,  923,  199,  199,  924,  925,  919,  199,
      199,  926,  927,  920,  905,  928,  929,  930,  199,  199,
      931,  932,  199,  933,  199,  934,  935,  921,  922,  936,
      923,  937,  938,  924,  925,  939,  940,  941,  926,  927,
      942,  943,  928,  929,  930,  944,  945,  931,  932,  946,
      933,  947,  934,  935,  948,  949,  936,  950,  937,  938,
      951,  952,  939,  940,  941,  953,  954,  942,  943,  955,
      956,  957,  944,  945,  958,  959,  946,  960,  947,  961,

      962,  948,  949,  963,  950,  964, 1023,  951,  952,  199,
     1024,  199,  953,  954,  199, 1025,  955,  956,  957,  199,
      966,  958,  959,  199,  960,  967,  961,  962, 1026,  199,
      963,  199,  964, 1023,  199,  965,  199, 1024,  199,  199,
      199,  199, 1025,  199,  199,  199,  199,  966,  968,  199,
      199, 1155,  967,  969, 1027, 1026,  199,  199,  199,  199,
     1155,  199,  965,  199,  199,  972,  199,  199,  199,  199,
      199,  199,  199,  971,  970,  968,  199,  199,  199,  199,
      969, 1027,  973,  199,  199,  199,  199,  199,  199, 1028,
      199,  199,  972,  976, 1155,  199,  199,  974,  199,  199,

      971,  970,  980, 1029,  199,  199,  199,  199,  199,  973,
      199,  199,  199,  199,  199,  199, 1028,  199,  975,  199,
      976,  977,  199,  978,  974,  199,  199,  199,  199,  980,
     1029,  199,  981,  199,  199,  199,  979,  199,  199, 1155,
      199,  199,  199, 1155,  199,  975,  199,  199,  977,  199,
      978,  199,  199,  199,  199,  199,  982,  983,  199,  981,
      199,  199,  199,  979,  199,  984,  199,  199,  199,  199,
      985,  199, 1155,  986,  199,  199,  199, 1030,  199,  199,
      199,  199, 1155,  982,  983, 1031,  199,  199,  199,  199,
      199,  987,  984,  199,  199,  199,  199,  985,  199,  199,

      986,  199,  199,  199, 1030,  199,  988,  989,  199,  199,
      199,  199, 1031,  199,  199,  199, 1155,  199,  987,  199,
      992, 1155,  199,  199,  990,  199,  199, 1155,  199,  199,
      199,  199,  199,  988,  989,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  991,  199,  992,  994,  199,
      199,  990,  199,  993,  199, 1155,  199,  199,  199,  199,
     1155,  199,  199,  199,  199,  995,  199,  199,  199,  199,
      199,  199,  991,  199,  199,  994,  199,  199,  996,  199,
      993,  199,  199,  199,  199,  199,  199,  997,  199, 1032,
      199,  199,  995,  199,  998,  199,  199,  999,  199,  199,

      199,  199,  199,  199,  199,  996,  199, 1002,  199,  199,
      199,  199,  199, 1155,  997,  199, 1032,  199,  199,  199,
      199,  998,  199,  199,  999,  199,  199,  199,  199,  199,
      199,  199, 1000,  199, 1002,  199, 1001, 1003, 1033,  199,
     1006,  199,  199,  199,  199,  199,  199, 1004, 1005, 1034,
      199,  199,  199,  199,  199,  199, 1155, 1155, 1155, 1000,
      199,  199,  199, 1001, 1003, 1033,  199, 1006,  199, 1009,
      199,  199,  199,  199, 1004, 1005, 1034, 1007,  199,  199,
      199,  199,  199,  199, 1008,  199, 1155, 1011,  199,  199,
     1155, 1155, 1155,  199, 1155, 1010, 1009, 1035,  199,  199,

      199,  199, 1155,  199, 1007,  199,  199,  199,  199,  199,
      199, 1008,  199, 1015, 1011,  199,  199,  199, 1017, 1013,
      199, 1012, 1010, 1155, 1035, 1016,  199,  199,  199,  199,
      199, 1014,  199,  199,  199,  199,  199,  199,  199, 1019,
     1015,  199,  199,  199,  199, 1017, 1013, 1155, 1012,  199,
     1018,  199, 1016,  199,  199,  199,  199, 1036, 1014,  199,
      199,  199,  199,  199,  199,  199, 1019, 1155,  199, 1020,
     1021,  199, 1037, 1038,  199,  199,  199, 1018,  199, 1022,
      199, 1039,  199,  199, 1036, 1040,  199,  199,  199, 1041,
     1042, 1043, 1044, 1045,  199, 1046, 1020, 1021,  199, 1037,

     1038,  199,  199,  199, 1047, 1048, 1022,  199, 1039, 1049,
      199, 1050, 1040, 1051, 1052, 1053, 1041, 1042, 1043, 1044,
     1045,  199, 1046, 1054, 1055,  199,  199, 1057,  199,  199,
      199, 1047, 1048, 1155, 1155, 1056, 1049, 1155, 1050,  199,
     1051, 1052, 1053, 1058,  199,  199,  199,  199,  199,  199,
     1054, 1055,  199,  199, 1057,  199,  199,  199, 1155,  199,
      199, 1061, 1056,  199, 1059,  199,  199, 1155, 1060,  199,
     1058,  199,  199,  199,  199,  199,  199,  199,  199, 1063,
      199,  199,  199,  199,  199,  199,  199,  199, 1061,  199,
      199, 1059,  199, 1062,  199, 1060,  199, 1064,  199,  199,

     1155,  199,  199,  199,  199,  199, 1063,  199,  199,  199,
      199, 1065,  199,  199,  199,  199,  199,  199, 1155,  199,
     1062,  199, 1155,  199, 1064,  199,  199,  199,  199,  199,
      199,  199, 1067,  199, 1155,  199, 1066,  199, 1065, 1155,
      199,  199,  199, 1155,  199,  199,  199,  199,  199,  199,
      199,  199, 1155,  199,  199, 1087, 1088, 1069,  199, 1067,
      199,  199,  199, 1066,  199,  199, 1068,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1087, 1088, 1069, 1071, 1070,  199,  199,  199,
      199, 1155,  199, 1068,  199,  199,  199,  199,  199,  199,

      199, 1073,  199,  199,  199,  199,  199, 1155,  199,  199,
     1155, 1089, 1071, 1070,  199, 1090,  199,  199, 1072,  199,
      199,  199, 1074,  199,  199,  199,  199, 1155, 1073,  199,
      199, 1075,  199,  199, 1077, 1076,  199,  199, 1089,  199,
      199, 1091, 1090,  199,  199, 1072,  199,  199,  199, 1074,
      199,  199,  199,  199,  199, 1080,  199,  199, 1075,  199,
      199, 1077, 1076,  199,  199,  199,  199,  199, 1091, 1079,
      199,  199, 1078, 1081,  199, 1092,  199,  199,  199,  199,
      199,  199, 1080,  199,  199,  199,  199, 1082, 1155,  199,
      199,  199,  199, 1083, 1093,  199, 1079,  199,  199, 1078,

     1081,  199, 1092,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1082,  199,  199, 1094,  199, 1095,
     1083, 1093,  199, 1084,  199,  199, 1085,  199,  199, 1096,
      199, 1097,  199,  199,  199,  199,  199,  199,  199, 1086,
      199, 1098,  199, 1099, 1094, 1100, 1095,  199, 1155,  199,
     1084,  199,  199, 1085,  199,  199, 1096,  199, 1097,  199,
      199,  199,  199, 1101,  199, 1103, 1086,  199, 1098,  199,
     1099,  199, 1100, 1102,  199,  199,  199,  199,  199,  199,
     1155,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1101,  199, 1103, 1155,  199,  199,  199,  199,  199,  199,

     1102, 1104,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199, 1105,  199,  199, 1107,  199,
      199,  199,  199,  199,  199,  199,  199, 1155, 1104, 1106,
      199,  199,  199,  199,  199, 1115,  199,  199,  199,  199,
      199,  199, 1105,  199,  199, 1107,  199,  199,  199,  199,
      199,  199,  199,  199, 1108, 1109, 1106,  199,  199,  199,
     1155, 1155, 1115,  199,  199,  199,  199,  199,  199,  199,
     1110,  199,  199,  199,  199,  199,  199,  199,  199, 1112,
      199, 1108, 1109, 1114,  199, 1111,  199,  199,  199, 1116,
     1113,  199,  199, 1117,  199,  199,  199, 1110,  199,  199,

      199,  199,  199,  199,  199, 1118, 1112,  199,  199, 1119,
     1114, 1120, 1111, 1121,  199,  199, 1116, 1113,  199,  199,
     1117,  199,  199,  199,  199,  199,  199,  199,  199, 1129,
      199, 1155, 1118, 1130,  199,  199, 1119,  199, 1120, 1122,
     1121,  199, 1123,  199,  199,  199,  199,  199,  199, 1155,
      199,  199,  199,  199,  199,  199, 1129,  199,  199,  199,
     1130,  199,  199,  199,  199, 1131, 1122, 1125,  199, 1123,
      199,  199,  199,  199,  199,  199, 1124,  199,  199, 1126,
      199, 1128,  199,  199,  199,  199,  199, 1132,  199,  199,
      199, 1127, 1131, 1133, 1125,  199,  199,  199, 1155, 1135,

      199,  199, 1137, 1124,  199,  199, 1126,  199, 1128,  199,
      199,  199,  199,  199, 1132,  199,  199, 1155, 1127, 1138,
     1133,  199,  199,  199,  199, 1134, 1135,  199,  199, 1137,
      199,  199,  199,  199,  199, 1139,  199, 1155,  199,  199,
      199, 1143,  199,  199, 1136, 1140, 1138,  199,  199, 1145,
      199, 1147, 1134,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1139,  199,  199,  199, 1149,  199, 1143, 1142,
      199, 1136, 1140, 1148,  199,  199, 1145,  199, 1147, 1144,
      199,  199,  199,  199,  199,  199, 1146, 1150, 1151, 1155,
      199,  199,  199, 1149,  199,  199,  199,  199, 1153, 1154,

     1148,  199,  199, 1155, 1155, 1155, 1144,  199, 1155, 1152,
     1155,  199,  199, 1146, 1150, 1151,  199,  199, 1155,  199,
     1155,  199,  199,  199, 1155, 1153, 1154, 1155,  199, 1155,
     1155, 1155, 1155, 1155,  199, 1155, 1152, 1155, 1155, 1155,
     1155, 1155, 1155,  199, 1155, 1155,  199, 1155,  199,   47,
       47,   47,   47,   47,   90, 1155, 1155,   90,   90,  185,
      185,  185, 1155,  185,  187, 1155,  187,  187,  187,  190,
     1155,  190,  190,  190,  199, 1155,  199,  199,  199,    7,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155
    } ;

static const flex_int16_t yy_chk[4648] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   17,   17,
       18,   18,   21,   22,   21,   24, 1158,   23,   30,   24,
       21, 1137,   21,   24,   23,   31,   21,   21,   44,   24,
       21,   23,   24,   22,   23,  404,   25,  286,   25,   21,
       22,   21,   24,   25,   23,   30,   24,   21,   25,   21,
       24,   23,   31,   21,   21,   44,   24,   21,   23,   24,
       22,   23,   27,   25,   28,   25,  193,   32,   27,  192,

       25,   32,   28,   29,   42,   25,   26,   32,   28,   29,
       29,   29,   42,  190,   26,   45,   29,   26,  167,   27,
       26,   28,   93,   26,   32,   27,   26,   92,   32,   28,
       29,   42,   90,   26,   32,   28,   29,   29,   29,   42,
       34,   26,   45,   29,   26,   38,  100,   26,   33,   38,
       26,   35,   33,   26,   34,   38,   33,   36,  101,   35,
       34,   34,   33,   35,   43,   43,   35,   34,   36,   50,
       50,   36,   38,  100,   36,   33,   38,   87,   35,   33,
       61,   34,   38,   33,   36,  101,   35,   34,   34,   33,
       35,   43,   43,   35,   41,   36,   41,   60,   36,   41,

       57,   36,   39,   56,   39,   51,   51,   39,   58,   58,
       59,   59,   71,   72,   39,   39,   78,   68,  104,   39,
       39,   41,   71,   41,   68,   53,   41,   88,   88,   39,
       68,   39,   71,   72,   39,   52,   78,   68,   48,   71,
       72,   39,   39,   78,   68,  104,   39,   39,   40,   71,
      102,   68,   40,   94,   94,   40,   40,   68,  102,   71,
       72,   46,   40,   78,   68,   40,  188,  188,   86,  194,
      194,   20,   19,   16,   15,   40,   11,  102,    7,   40,
      105,    4,   40,   40,    3,  102,  106,    0,   86,   40,
        0,    0,   40,   62,   62,   86,   62,   62,   62,   62,

       62,   62,   69,   62,   62,   62,   69,  105,   73,   62,
       69,   62,   73,  106,  109,   86,   69,   62,   73,   62,
      110,  109,  103,   62,   62,  103,   69,   62,   73,   69,
      115,  115,    0,   69,    0,   73,   62,   69,   62,   73,
        0,  109,    0,   69,   62,   73,   62,  110,  109,  103,
       62,   62,  103,   69,   62,   73,  116,  115,  115,   62,
       63,   63,    0,   63,   63,   63,   63,   63,   63,   79,
       63,   63,   63,   79,   74,   85,  117,   63,   74,   79,
      118,  112,   74,  116,  119,   85,   83,  120,   74,   79,
       83,  112,    0,  122,   83,   85,   79,   63,   74,    0,

       79,   74,   85,  117,   63,   74,   79,  118,  112,   74,
       83,  119,   85,   83,  120,   74,   79,   83,  112,   82,
      122,   83,   85,  123,   63,   74,   63,   64,   82,  124,
       82,   64,  125,   82,   64,  113,    0,   83,    0,   82,
      113,   64,  126,  127,   64,   84,   82,  128,   84,   84,
      123,   64,    0,    0,   64,   82,  124,   82,   64,  125,
       82,   64,  113,  107,  107,   84,   82,  113,   64,  126,
      127,   64,   84,  129,  128,   84,   84,  107,   64,   65,
      111,  111,  111,   65,  111,    0,  131,   65,  132,  111,
      107,  107,   84,   65,  114,  130,   65,  134,  130,  114,

      129,  135,    0,   65,  107,  114,   65,  111,  111,  111,
       65,  111,  114,  131,   65,  132,  111,    0,    0,  136,
       65,  114,  130,   65,  134,  130,  114,  137,  135,  136,
       65,   66,  114,  138,  136,  136,  139,  140,   66,  114,
       66,  141,  121,  141,  121,   66,  136,  143,  121,  144,
       66,   66,    0,  145,  137,  121,  136,  146,   66,  121,
      138,  136,  136,  139,  140,   66,    0,   66,  141,  121,
      141,  121,   66,  147,  143,  121,  144,   66,   66,   67,
      145,  148,  121,   67,  146,  149,  121,   67,  150,  142,
       67,  142,  151,   67,  153,  154,   67,  155,  156,   67,

      147,  157,  142,   67,    0,    0,   67,  160,  148,    0,
       67,    0,  149,    0,   67,  150,  142,   67,  142,  151,
       67,  153,  154,   67,  155,  156,   67,  161,  157,  142,
       67,   70,   70,  158,  160,  162,  159,  158,   70,   70,
       70,  159,  164,  165,  163,   70,  166,  168,  169,  171,
      172,   70,    0,  163,  161,  173,    0,  176,   70,   70,
      158,  163,  162,  159,  158,   70,   70,   70,  159,  164,
      165,  163,   70,  166,  168,  169,  171,  172,   70,   75,
      163,  170,  173,   75,  176,  177,  175,  174,  163,  175,
      178,  180,  170,   75,  181,  182,  178,  183,  179,   75,

       75,    0,    0,   75,    0,    0,   75,  174,  170,  199,
       75,  179,  177,  175,  174,    0,  175,  178,  180,  170,
       75,  181,  182,  178,  183,  179,   75,   75,  201,  199,
       75,   76,   76,  204,  174,    0,  199,    0,  179,  288,
       76,  200,  200,  201,   76,    0,  204,   76,  201,  290,
        0,   76,    0,  204,    0,  201,  199,  202,   76,   76,
      204,  208,  200,    0,  202,  291,  288,   76,  200,  200,
      201,   76,  202,  204,   76,  201,  290,  202,   76,   77,
      204,  208,  293,   77,  202,  205,  296,  205,  208,  200,
       77,  202,  291,   77,  203,  212,   77,  203,  203,  202,

        0,  297,    0,   77,  202,  212,   77,  205,  208,  293,
       77,    0,  205,  296,  205,  212,    0,   77,  203,  298,
       77,  203,  212,   77,  203,  203,    0,  206,  297,  206,
       77,   80,  212,   80,  205,  213,   80,  207,  207,  207,
        0,  299,  212,   80,   80,  203,  298,  206,   80,   80,
      213,  301,  207,   80,  206,  213,  206,  207,   80,  302,
       80,    0,  213,   80,  207,  207,  207,  233,  299,  210,
       80,   80,  303,  210,  206,   80,   80,  213,  301,  207,
       80,   81,  213,  209,  207,   81,  302,  233,   81,   81,
      209,  216,    0,  210,  233,   81,  210,  209,   81,  303,

      210,    0,    0,  209,    0,   81,    0,  216,   81,    0,
      209,  216,   81,    0,  233,   81,   81,  209,  216,  217,
      210,    0,   81,  215,  209,   81,    0,  219,  219,  217,
      209,  218,   81,  211,  216,  304,  215,  215,  216,  217,
      211,  211,  211,  215,  211,  218,  217,  305,  219,  211,
      215,  218,  306,  211,  219,  219,  217,    0,  218,    0,
      211,  307,  304,  215,  215,    0,  217,  211,  211,  211,
      215,  211,  218,  232,  305,  219,  211,    0,  218,  306,
      211,  214,  220,  222,  220,  214,  214,  223,  307,  232,
      222,    0,  214,  232,  223,    0,  308,  309,  239,  214,

      232,  311,  225,  222,  220,  214,    0,  223,  214,  220,
      222,  220,  214,  214,  223,  225,  232,  222,  239,  214,
      232,  223,  225,  308,  309,  239,  214,  224,  311,  225,
      222,  220,  214,  221,  223,  221,  227,  224,  226,  221,
        0,  228,  225,  227,    0,  239,  221,  224,  226,  225,
      221,  228,    0,    0,  224,  221,  227,    0,  226,  229,
      221,  228,  221,  227,  224,  226,  221,  230,  228,  229,
      227,  231,  234,  221,  224,  226,  234,  221,  228,  229,
      231,  230,  221,  227,  230,  226,  229,  230,  228,  235,
        0,  231,  234,  237,  230,    0,  229,  238,  231,  234,

      235,  238,  237,  234,  312,  314,  229,  231,  230,  235,
        0,  230,  315,  237,  230,  243,  235,  238,  231,  234,
      237,  240,  240,  316,  238,    0,    0,  235,  238,  237,
        0,  312,  314,  317,  243,  243,  235,  236,  236,  315,
      237,  240,  243,  244,  238,    0,  245,  236,  240,  240,
      316,  241,  236,  236,    0,  245,  244,  241,  236,  241,
      317,  243,  243,  244,  236,  236,  245,  318,  240,    0,
      244,  241,  246,  245,  236,  319,  251,  251,  241,  236,
      236,  246,  245,  244,  241,  236,  241,  242,    0,  242,
      244,  242,  246,  245,  318,  247,  251,  248,  241,  246,

      242,  250,  319,  251,  251,  250,  249,  321,  246,  252,
      247,  242,  248,  249,  242,  247,  242,  248,  242,  246,
      253,  253,  247,  251,  248,  250,  249,  242,  250,  252,
      254,  256,  250,  249,  321,  256,  252,  247,  242,  248,
      249,  253,  247,  271,  248,  254,  255,  253,  253,    0,
      254,    0,  250,  249,    0,  256,  252,  254,  256,  255,
      257,  258,  256,  271,  257,  258,  255,    0,  253,  259,
      271,  322,  254,  255,  260,    0,  260,  254,  259,  323,
      257,  258,  256,  259,    0,    0,  255,  257,  258,  259,
      271,  257,  258,  255,  260,  261,  259,  262,  322,    0,

      262,  260,  261,  260,    0,  259,  323,  257,  258,  263,
      259,  263,  265,  264,  324,  261,  259,  262,  263,    0,
        0,  260,  261,  264,  262,  265,  263,  262,    0,  261,
      266,  263,  265,  264,  266,    0,  263,    0,  263,  265,
      264,  324,  261,  267,  262,  263,  269,  268,  325,  269,
      264,  273,  265,  263,  266,  268,    0,  266,  263,  265,
      264,  266,  273,  267,  270,  267,  326,  268,    0,  269,
      267,  273,  270,  269,  268,  325,  269,  272,  273,  276,
      276,  266,  268,  270,  270,  272,    0,    0,  275,  273,
      267,  270,  275,  326,  268,  275,  269,  272,  273,  270,

      276,  274,    0,  279,  272,  274,  276,  276,  275,  277,
      270,  270,  272,  277,  280,  275,  279,  327,  282,  275,
        0,  274,  275,  279,  272,  274,  278,  276,  274,  277,
      279,  282,  274,  278,  280,  275,  277,    0,  282,  278,
      277,  280,  281,  279,  327,  282,  278,  283,  274,  313,
      279,  283,  274,  278,  328,  329,  277,  281,  282,  330,
      278,  280,  281,  331,  313,  282,  278,  332,  300,  281,
      300,  283,  333,  278,  283,  334,  313,  335,  283,  336,
      337,  328,  329,  338,  281,  300,  330,  339,  340,  281,
      331,  313,  341,  342,  332,  300,  343,  300,  283,  333,

      345,  344,  334,  346,  335,  348,  336,  337,  349,  350,
      338,  344,  300,  351,  339,  340,  352,  353,  355,  341,
      342,  356,  357,  343,  358,  360,  361,  345,  344,  362,
      346,  363,  348,  364,  365,  349,  350,  366,  344,  367,
      351,  368,  369,  352,  353,  355,  370,  371,  356,  357,
      372,  358,  360,  361,  373,  374,  362,  375,  363,  376,
      364,  365,  378,  379,  366,  380,  367,  383,  368,  369,
      381,  384,  385,  370,  371,  386,  387,  372,  389,  390,
      392,  373,  374,  393,  375,  381,  376,  394,  390,  378,
      379,  391,  380,  391,  383,  395,  396,  381,  384,  385,

      397,  398,  386,  387,  399,  389,  390,  392,  399,  400,
      393,  402,  381,  405,  394,  390,    0,  406,  391,  407,
      391,  408,  395,  396,  521,  409,  411,  397,  398,  410,
      411,  399,  409,  405,  412,  399,  400,  406,  402,  407,
      405,  408,  413,  415,  406,  409,  407,  415,  408,  410,
      411,  521,  409,  411,  412,  414,  410,  411,    0,  409,
      405,  412,  413,  415,  406,  414,  407,  416,  408,  413,
      415,  417,  409,    0,  415,  414,  410,  411,  417,    0,
      419,  412,  414,  420,  418,  416,  418,  416,  421,  413,
      415,  417,  414,  419,  416,    0,  421,    0,  417,  420,

      419,  418,  414,  420,  422,  417,  418,  419,  421,  423,
      420,  418,  416,  418,  416,  421,  522,  425,  417,  422,
      419,  425,  427,  421,  422,  424,  420,  419,  418,  423,
      420,  422,    0,  418,  424,  421,  423,  428,    0,  426,
      429,  425,  427,  522,  425,  424,  422,  429,  425,  427,
      431,  422,  424,  426,  430,  433,  423,  428,  430,  426,
      429,  424,    0,    0,  428,  431,  426,  429,  425,  427,
      431,  432,  424,  432,  429,  433,  434,  431,  430,  436,
      426,  430,  433,    0,  428,  430,  426,  429,  437,  438,
      436,  434,  431,  432,  523,  524,  434,  431,  432,  436,

      432,  435,  433,  434,  435,  430,  436,    0,  437,  438,
      439,  441,  440,  441,  439,  437,  438,  436,  434,  525,
      432,  523,  524,  434,  435,    0,  436,  446,  435,  442,
      445,  435,  440,  441,  439,  437,  438,  439,  441,  440,
      441,  439,  444,  442,  445,  443,  525,  446,    0,  442,
      445,  435,  443,    0,  446,  444,  442,  445,  448,  440,
      441,  439,  444,  447,  452,  443,  448,  447,    0,  444,
      442,  445,  443,    0,  446,  449,  442,  445,  448,  443,
      452,  450,  444,  449,  452,  448,    0,  447,  450,  444,
      447,  452,  443,  448,  447,  449,  451,  453,    0,  451,

      453,  450,  449,    0,    0,  448,    0,  452,  450,  454,
      449,  452,  456,  454,  447,  450,    0,  453,  455,  451,
      526,  459,  449,  451,  453,  456,  451,  453,  450,  454,
      460,  457,  456,  455,  461,    0,  454,  457,  455,  456,
      454,  459,    0,  458,  453,  455,  451,  526,  459,  465,
      460,  457,  456,  458,  461,    0,  454,  460,  457,  456,
      455,  461,  462,  458,  457,  455,  464,  463,  459,  465,
      458,  467,  462,    0,  527,  464,  465,  460,  457,    0,
      458,  461,  462,  463,  468,  466,  464,  463,  468,  462,
      458,  467,    0,  464,  463,    0,  465,    0,  467,  462,

      466,  527,  464,  472,  468,  466,  475,  469,  469,  462,
      463,  468,  466,  464,  463,  468,  470,  471,  467,  471,
      470,  475,  473,  472,  473,  474,  475,  466,  469,    0,
      472,  468,  466,  475,  469,  469,  477,  471,  476,    0,
      470,  474,  473,  470,  471,  474,  471,  470,  475,  473,
      472,  473,  474,  475,  476,  469,  477,  479,  476,  478,
      480,    0,  481,  477,  471,  476,  478,  470,  474,  473,
      479,  482,  474,    0,  480,  492,    0,  479,    0,  478,
      480,  476,  481,  477,  479,  476,  478,  480,  483,  481,
      484,  482,  483,  478,  485,  492,  529,  479,  482,  484,

      486,  480,  492,  485,  479,  487,  478,  480,  533,  481,
      484,  486,  483,  487,  485,  483,  489,  484,  482,  483,
      486,  485,  492,  529,  488,  487,  484,  486,  488,  494,
      485,  489,  487,  534,  493,  533,  489,  484,  486,  483,
      487,  485,  490,  489,  493,  490,  491,  486,  488,  494,
      495,  488,  487,  491,  493,  488,  494,    0,  489,  497,
      534,  493,  490,  489,  496,  500,  491,    0,  498,  490,
      495,  493,  490,  491,  497,  488,  494,  495,  535,  497,
      491,  493,  496,  498,  496,  500,  497,  501,  498,  490,
        0,  496,  500,  491,  501,  498,    0,  495,  499,  499,

        0,  497,  503,  505,  506,  535,  497,  501,  537,  496,
      498,  496,  500,  499,  501,  498,  502,  503,  538,  499,
        0,  501,  503,  505,  506,  499,  499,  502,  504,  503,
      505,  506,  507,  508,  501,  537,  502,  504,    0,  539,
      499,  507,  508,  502,  503,  538,  499,  510,  504,  503,
      505,  506,  507,  508,  502,  504,  512,  510,  511,  507,
      508,  509,  511,  502,  504,  512,  539,  510,  507,  508,
      513,  509,  540,  509,  510,  504,  512,    0,    0,  507,
      508,  509,  511,  512,  510,  511,  513,  515,  509,  511,
      513,  516,  512,  514,  510,  514,    0,  513,  509,  540,

      509,  518,  541,  512,  518,  515,  516,  515,  509,  511,
      517,  516,  542,  513,  515,  514,  519,  513,  516,  517,
      514,  518,  514,  517,  543,  544,  545,  520,  518,  541,
      517,  518,  515,  516,  515,  546,  519,  517,  516,  542,
      520,  547,  514,  519,  548,  551,  517,  520,  518,  552,
      517,  543,  544,  545,  520,  553,  554,  517,  555,  556,
      557,  559,  546,  519,  560,  563,  564,  520,  547,  566,
      569,  548,  551,  570,  520,  571,  552,  572,  573,  574,
      576,  580,  553,  554,  582,  555,  556,  557,  559,  584,
      574,  560,  563,  564,  585,  585,  566,  569,  586,  587,

      570,  589,  571,  590,  572,  573,  574,  576,  580,  591,
      592,  582,  593,  595,  596,  597,  584,  574,  598,  599,
      600,  585,  585,  601,  602,  586,  587,  603,  589,  604,
      590,  606,  607,  608,  609,  610,  591,  592,  611,  593,
      595,  596,  597,  614,  615,  598,  599,  600,  617,  618,
      601,  602,  619,  620,  603,  621,  604,  622,  606,  607,
      608,  609,  610,  623,  624,  611,  626,  628,  631,  633,
      614,  615,  632,    0,    0,  617,  618,  634,  637,  619,
      620,  631,  621,    0,  622,  632,  638,  635,  631,  633,
      623,  624,  632,  626,  628,  631,  633,  634,  637,  632,

      635,  636,    0,  640,  634,  637,  638,  635,  631,  641,
      636,  642,  632,  638,  635,  631,  633,  743,  639,  632,
      745,  636,  639,  640,  634,  637,  646,  635,  636,  641,
      640,  642,  643,  638,  635,  644,  641,  636,  642,  644,
      643,  645,  639,    0,  743,  639,  646,  745,  636,  639,
      640,  649,  643,  646,  645,  644,  641,  647,  642,  643,
      648,  645,  644,    0,    0,  649,  644,  643,  645,  639,
      650,  649,  647,  646,    0,  648,  651,  647,  649,  643,
      648,  645,  644,  651,  647,  650,  653,  648,  645,  652,
      650,  654,  649,    0,    0,  654,  651,  650,  649,  647,

        0,  653,  648,  651,  647,  652,  653,  648,    0,  652,
      651,  655,  650,  653,    0,  654,  652,  650,  654,  656,
      658,  656,  654,  651,  655,  657,    0,  658,  653,  657,
      659,  655,  652,  653,    0,  660,  652,    0,  655,  747,
      658,  656,  654,  663,    0,  657,  656,  658,  656,  661,
      659,  655,  657,  662,  658,  660,  657,  659,  655,  663,
      661,  665,  660,  663,  662,  665,  747,  658,  656,  661,
      663,  666,  657,  662,  664,  666,  661,  659,    0,  667,
      662,    0,  660,  668,  671,  665,  663,  661,  665,  664,
      663,  662,  665,  669,  664,  666,  661,  672,  666,  667,

      662,  664,  666,  668,  671,  670,  667,    0,  669,  670,
      668,  671,  665,  669,  673,    0,  664,  672,  673,  675,
      669,  664,  666,  674,  672,  748,  667,  677,  676,  670,
      668,  671,  670,  678,  674,  669,  670,  676,  673,  675,
      669,  673,  679,  674,  672,  673,  675,  677,  676,    0,
      674,    0,  748,  678,  677,  676,  670,  681,  680,  682,
      678,  674,  679,  685,  676,  673,  675,    0,  683,  679,
      674,  680,  682,    0,  677,  676,  681,  681,  680,  682,
      678,  683,  687,  685,  681,  680,  682,    0,  683,  679,
      685,  688,  689,  686,  684,  683,  684,  691,  680,  682,

      686,    0,  687,  681,  681,  680,  682,  684,  683,  687,
      685,  688,  689,  686,  684,  683,  690,  691,  688,  689,
      686,  684,  693,  684,  691,  692,  694,  686,  698,  687,
      696,  690,  692,  696,  684,    0,  690,    0,  688,  689,
      686,  684,  693,  690,  691,  692,  694,  695,  698,  693,
      696,  697,  692,  694,  699,  698,  699,  696,  690,  692,
      696,  695,  695,  690,  697,  700,  701,  695,    0,  693,
      704,  697,  692,  694,  695,  698,  699,  696,  697,  701,
        0,  699,  702,  699,    0,  700,  701,    0,  695,  695,
      704,  697,  700,  701,  695,  702,  703,  704,  697,  705,

        0,  706,  702,  699,  703,  706,  701,  709,    0,  702,
      708,  707,  700,  701,  705,  707,  703,  704,  708,  705,
      709,  749,  702,  703,  710,  706,  705,  709,  706,  702,
      708,  703,  706,  711,  709,  707,  711,  708,  707,  710,
      750,  705,  707,  703,  710,  708,  705,  709,  749,  715,
      712,  710,  706,  716,  709,  713,  711,  708,  712,  714,
      711,  714,  707,  711,  713,    0,  710,  750,  751,  715,
      712,  710,    0,  716,  717,  713,  715,  712,  717,  719,
      716,  714,  713,  711,  720,  712,  714,  722,  714,  718,
      723,  713,  719,  718,  717,  751,  715,  712,  724,  719,

      716,  717,  713,  721,  720,  717,  719,  722,  714,  718,
      723,  720,  724,  721,  722,  725,  718,  723,  724,  719,
      718,  717,    0,  721,  726,  724,  719,  753,  755,  725,
      721,  720,  729,  756,  722,  725,  718,  723,  728,  724,
      721,  727,  725,  727,  726,  724,    0,  728,  729,  730,
      721,  726,  729,  730,  753,  755,  725,  731,  728,  729,
      756,  733,  725,  727,    0,  728,  757,  732,  727,  732,
      727,  726,  731,  730,  728,  729,  730,  731,  735,  729,
      730,  733,  737,  734,  731,  728,  734,  732,  733,  758,
      727,  736,  738,  757,  732,  739,  732,  740,  735,  731,

      730,  760,  737,  734,  731,  735,  761,  736,  733,  737,
      734,  736,  738,  734,  732,  739,  758,  740,  736,  738,
      762,  763,  739,  764,  740,  735,  765,  766,  760,  737,
      734,  767,  768,  761,  736,  769,  772,  773,  736,  738,
      775,  777,  739,  780,  740,  781,  782,  762,  763,  783,
      764,  788,  790,  765,  766,  791,  792,  795,  767,  768,
      797,  798,  769,  772,  773,  799,  800,  775,  777,  802,
      780,  803,  781,  782,  804,  805,  783,  806,  788,  790,
      807,  808,  791,  792,  795,  809,  810,  797,  798,  811,
      812,  813,  799,  800,  814,  816,  802,  817,  803,  818,

      820,  804,  805,  821,  806,  822,  907,  807,  808,  824,
      909,  825,  809,  810,  826,  910,  811,  812,  813,  827,
      828,  814,  816,  829,  817,  830,  818,  820,  911,  824,
      821,  825,  822,  907,  826,  826,  824,  909,  825,  827,
      828,  826,  910,  829,  832,  830,  827,  828,  831,  831,
      829,    0,  830,  832,  913,  911,  824,  835,  825,  833,
        0,  826,  826,  834,  832,  836,  827,  828,  837,  831,
      829,  832,  830,  834,  833,  831,  831,  835,  838,  833,
      832,  913,  838,  834,  835,  836,  833,  839,  837,  915,
      834,  832,  836,  841,    0,  837,  831,  839,  838,  842,

      834,  833,  846,  916,  835,  838,  833,  839,  844,  838,
      834,  840,  836,  841,  839,  837,  915,  843,  840,  842,
      841,  843,  846,  844,  839,  838,  842,  845,  844,  846,
      916,  840,  847,  853,  839,  844,  845,  843,  840,    0,
      841,  848,  849,    0,  843,  840,  842,  845,  843,  846,
      844,  850,  847,  853,  845,  844,  848,  849,  840,  847,
      853,  848,  849,  845,  843,  850,  851,  854,  848,  849,
      851,  850,    0,  852,  845,  852,  855,  917,  850,  847,
      853,  857,    0,  848,  849,  919,  851,  854,  848,  849,
      859,  855,  850,  851,  854,  852,  855,  851,  850,  856,

      852,  857,  852,  855,  917,  858,  856,  858,  857,  860,
      859,  861,  919,  851,  854,  862,    0,  859,  855,  856,
      864,    0,  852,  855,  860,  858,  856,    0,  857,  860,
      863,  861,  858,  856,  858,  862,  860,  859,  861,  865,
      864,  866,  862,  867,  868,  863,  856,  864,  866,  869,
      863,  860,  858,  865,  870,    0,  860,  863,  861,  865,
        0,  866,  862,  867,  868,  871,  865,  864,  866,  869,
      867,  868,  863,  872,  870,  866,  869,  863,  873,  875,
      865,  870,  873,  876,  874,  871,  865,  874,  866,  921,
      867,  868,  871,  872,  875,  877,  869,  878,  879,  875,

      872,  870,  873,  876,  874,  873,  875,  882,  884,  873,
      876,  874,  871,    0,  874,  877,  921,  878,  879,  880,
      872,  875,  877,  881,  878,  879,  875,  882,  884,  873,
      876,  874,  880,  883,  882,  884,  881,  883,  925,  880,
      887,  887,  877,  881,  878,  879,  880,  885,  886,  927,
      881,  885,  886,  883,  882,  884,    0,    0,    0,  880,
      883,  887,  888,  881,  883,  925,  880,  887,  887,  890,
      881,  885,  886,  890,  885,  886,  927,  888,  885,  886,
      883,  891,  888,  892,  889,  889,    0,  892,  887,  888,
        0,    0,    0,  890,    0,  891,  890,  928,  885,  886,

      890,  891,    0,  892,  888,  889,  894,  893,  891,  888,
      892,  889,  889,  896,  892,  898,  895,  896,  899,  894,
      890,  893,  891,    0,  928,  897,  894,  893,  891,  897,
      892,  895,  889,  894,  893,  898,  895,  896,  899,  901,
      896,  902,  898,  895,  896,  899,  894,    0,  893,  897,
      900,  900,  897,  894,  893,  903,  897,  934,  895,  901,
      906,  902,  898,  895,  896,  899,  901,    0,  902,  903,
      904,  900,  935,  938,  904,  903,  897,  900,  900,  905,
      906,  939,  903,  905,  934,  941,  901,  906,  902,  942,
      943,  945,  946,  947,  904,  951,  903,  904,  900,  935,

      938,  904,  903,  905,  952,  953,  905,  906,  939,  955,
      905,  956,  941,  957,  958,  963,  942,  943,  945,  946,
      947,  904,  951,  964,  965,  966,  967,  968,  970,  969,
      905,  952,  953,    0,    0,  967,  955,    0,  956,  972,
      957,  958,  963,  969,  965,  966,  967,  968,  970,  969,
      964,  965,  966,  967,  968,  970,  969,  971,    0,  972,
      973,  974,  967,  974,  971,  976,  972,    0,  973,  978,
      969,  965,  966,  967,  968,  970,  969,  971,  975,  977,
      973,  980,  977,  974,  971,  976,  972,  973,  974,  978,
      974,  971,  976,  975,  981,  973,  978,  979,  975,  979,

        0,  980,  977,  982,  971,  975,  977,  973,  980,  977,
      974,  983,  976,  984,  981,  987,  978,  986,    0,  979,
      975,  981,    0,  982,  979,  975,  979,  985,  980,  977,
      982,  983,  986,  984,    0,  987,  985,  986,  983,    0,
      984,  981,  987,    0,  986,  988,  979,  985,  989,  990,
      982,  991,    0,  992,  985, 1028, 1029,  993,  983,  986,
      984,  994,  987,  985,  986,  988,  992,  995,  989,  990,
      998,  991,  988,  992,  985,  989,  990,  993,  991,  996,
      992,  994, 1028, 1029,  993,  997,  996,  995,  994,  997,
      998,    0,  988,  992,  995,  989,  990,  998,  991,  996,

      992, 1000, 1001,  999,  993, 1002,  996,    0,  994,  997,
        0, 1031,  997,  996,  995, 1032,  997,  998,  999, 1006,
     1005, 1000, 1001,  999, 1007, 1002,  996,    0, 1000, 1001,
      999, 1003, 1002, 1003, 1005, 1004,  997, 1004, 1031, 1006,
     1005, 1037, 1032, 1008, 1007,  999, 1006, 1005, 1000, 1001,
      999, 1007, 1002, 1003, 1010, 1011, 1011, 1004, 1003, 1012,
     1003, 1005, 1004, 1008, 1004, 1009, 1006, 1005, 1037, 1010,
     1008, 1007, 1009, 1013, 1010, 1039, 1011, 1013, 1017, 1012,
     1003, 1010, 1011, 1011, 1004, 1009, 1012, 1014,    0, 1018,
     1008, 1014, 1009, 1015, 1040, 1015, 1010, 1013, 1017, 1009,

     1013, 1010, 1039, 1011, 1013, 1017, 1012, 1019, 1016, 1018,
     1020, 1014, 1009, 1021, 1014, 1015, 1018, 1043, 1014, 1044,
     1015, 1040, 1015, 1016, 1013, 1017, 1021, 1019, 1016, 1047,
     1020, 1049, 1022, 1021, 1019, 1016, 1018, 1020, 1014, 1022,
     1021, 1050, 1015, 1051, 1043, 1052, 1044, 1055,    0, 1056,
     1016, 1057, 1022, 1021, 1019, 1016, 1047, 1020, 1049, 1022,
     1021, 1058, 1059, 1060, 1062, 1063, 1022, 1055, 1050, 1056,
     1051, 1057, 1052, 1061, 1055, 1065, 1056, 1061, 1057, 1022,
        0, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1058, 1059,
     1060, 1062, 1063,    0, 1055, 1065, 1056, 1061, 1057, 1067,

     1061, 1064, 1065, 1068, 1061, 1070, 1064, 1066, 1058, 1059,
     1060, 1062, 1063, 1064, 1066, 1069, 1071, 1069, 1072, 1067,
     1073, 1074, 1065, 1068, 1061, 1070, 1067,    0, 1064, 1071,
     1068, 1077, 1070, 1064, 1066, 1088, 1071, 1069, 1072, 1075,
     1073, 1074, 1069, 1071, 1069, 1072, 1067, 1073, 1074, 1076,
     1068, 1077, 1070, 1078, 1075, 1076, 1071, 1080, 1077, 1075,
        0,    0, 1088, 1071, 1069, 1072, 1075, 1073, 1074, 1076,
     1079, 1082, 1081, 1078, 1079, 1083, 1076, 1080, 1077, 1082,
     1078, 1075, 1076, 1084, 1080, 1081, 1075, 1085, 1086, 1091,
     1083, 1082, 1081, 1093, 1079, 1083, 1076, 1079, 1082, 1081,

     1078, 1079, 1083, 1084, 1080, 1096, 1082, 1085, 1086, 1097,
     1084, 1098, 1081, 1099, 1085, 1086, 1091, 1083, 1082, 1081,
     1093, 1079, 1083, 1101, 1102, 1103, 1104, 1105, 1106, 1115,
     1084,    0, 1096, 1117, 1085, 1086, 1097, 1108, 1098, 1102,
     1099, 1109, 1105, 1101, 1102, 1103, 1104, 1105, 1106,    0,
     1101, 1102, 1103, 1104, 1105, 1106, 1115, 1108, 1110, 1111,
     1117, 1109, 1114, 1107, 1108, 1118, 1102, 1110, 1109, 1105,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1113, 1110, 1111,
     1112, 1113, 1114, 1107, 1108, 1110, 1111, 1121, 1109, 1114,
     1107, 1112, 1118, 1122, 1110, 1123, 1126, 1113,    0, 1125,

     1112, 1125, 1131, 1107, 1113, 1110, 1111, 1112, 1113, 1114,
     1107, 1124, 1127, 1122, 1121, 1123, 1126,    0, 1112, 1132,
     1122, 1125, 1123, 1126, 1113, 1124, 1125, 1112, 1125, 1131,
     1133, 1124, 1127, 1134, 1128, 1135, 1136,    0, 1124, 1127,
     1122, 1141, 1123, 1126, 1128, 1136, 1132, 1139, 1125, 1143,
     1133, 1145, 1124, 1134, 1128, 1135, 1136, 1133, 1124, 1127,
     1134, 1128, 1135, 1136, 1140, 1142, 1147, 1139, 1141, 1139,
     1146, 1128, 1136, 1146, 1139, 1144, 1143, 1133, 1145, 1142,
     1134, 1128, 1135, 1136, 1140, 1142, 1144, 1148, 1149,    0,
     1146, 1140, 1142, 1147, 1139, 1144, 1150, 1146, 1151, 1152,

     1146, 1154, 1144,    0,    0,    0, 1142, 1148,    0, 1150,
        0, 1140, 1142, 1144, 1148, 1149, 1150, 1146,    0, 1152,
        0, 1154, 1144, 1150,    0, 1151, 1152,    0, 1154,    0,
        0,    0,    0,    0, 1148,    0, 1150,    0,    0,    0,
        0,    0,    0, 1150,    0,    0, 1152,    0, 1154, 1156,
     1156, 1156, 1156, 1156, 1157,    0,    0, 1157, 1157, 1159,
     1159, 1159,    0, 1159, 1160,    0, 1160, 1160, 1160, 1161,
        0, 1161, 1161, 1161, 1162,    0, 1162, 1162, 1162, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "expr.hpp"
#include "bison_parser.hpp"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2081 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2095 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2382 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1156 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1155 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(XOR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(POINT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(ST_SRID)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(ST_DISTANCE_SPHERE)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(COUNT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 150:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 157:
#line 221 "flex_lexer.l"
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->ival = parseSigned128(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = zsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 246 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 248 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3288 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1156 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1156 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1155);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 251 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
